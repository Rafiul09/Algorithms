// Fibonacci Series using Recursion
#include <bits/stdc++.h>
using namespace std;

int fib(int n)
{
	if (n <= 1)
		return n;
	return fib(n - 1) + fib(n - 2);
}

int main()
{
	int n = 9;
	cout << fib(n);
	getchar();
	return 0;
}

------------------------------------
// C++ program to find factorial of given number
#include <iostream>
using namespace std;

int factorial(int n)
{
	// single line to find factorial
	return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);
}

// Driver Code
int main()
{
	int num = 5;
	cout << "Factorial of " << num << " is "<< factorial(num);
	return 0;
}

-----------------------------------------------------------------
// A school method based C++ program to check if a
// number is prime
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n)
{
	// Corner case
	if (n <= 1)
		return false;

	// Check from 2 to n-1
	for (int i = 2; i < n; i++)
		if (n % i == 0)
			return false;

	return true;
}

// Driver Program to test above function
int main()
{
	isPrime(11) ? cout << " true\n" : cout << " false\n";
	isPrime(15) ? cout << " true\n" : cout << " false\n";
	return 0;
}
-------------------------------------------------------------------
// A optimized school method based C++ program to check
// if a number is prime
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n)
{
	// Corner cases
	if (n <= 1)
		return false;
	if (n <= 3)
		return true;

	// This is checked so that we can skip
	// middle five numbers in below loop
	if (n % 2 == 0 || n % 3 == 0)
		return false;

	// Using concept of prime number
	// can be represented in form of
	// (6*n + 1) or(6*n - 1) hence
	// we have to go for every multiple of 6 and
	// prime number would always be 1 less or 1 more than
	// the multiple of 6.
	for (int i = 5; i * i <= n; i = i + 6)
		if (n % i == 0 || n % (i + 2) == 0)
			return false;

	return true;
}

// Driver Program to test above function
int main()
{
	isPrime(4191) ? cout << " true\n" : cout << " false\n";
	isPrime(15) ? cout << " true\n" : cout << " false\n";
	return 0;
}
------------------------------------------------------
// C++ program to demonstrate
// Basic Euclidean Algorithm

#include <bits/stdc++.h>
using namespace std;

// Function to return
// gcd of a and b
int gcd(int a, int b)
{
	if (a == 0)
		return b;
	return gcd(b % a, a);
}

// Driver Code
int main()
{
	int a = 10, b = 15;

	// Function call
	cout << "GCD(" << a << ", " << b << ") = " << gcd(a, b)
		<< endl;
	a = 35, b = 10;
	cout << "GCD(" << a << ", " << b << ") = " << gcd(a, b)
		<< endl;
	a = 31, b = 2;
	cout << "GCD(" << a << ", " << b << ") = " << gcd(a, b)
		<< endl;
	return 0;
}
---------------------------------------------------------
//Rand in txt
#include<bits/stdc++.h>
#include <iostream>
 using namespace std;

 int main()
 {
     srand(time(0));
     freopen("input.txt","w",stdout);
     int a[100];
     for(int i=0;i<100;i++)
     {
         a[i]=rand();
         cout<<a[i]<<"\n";
     }
 }
-------------------------------------------------
#include<bits/stdc++.h>
#include <chrono>
#include <iostream>
using namespace std::chrono;
using namespace std;

int * bubbleSort(int *p, int n){

int i, j;
    for (i = 0; i < n - 1; i++)

        for (j = 0; j < n - i - 1; j++)
            if (p[j] > p[j + 1])
                swap(p[j], p[j + 1]);
}

void printList(int *p, int n){
    for(int i=0;i<n;i++)
     {

         cout<<p[i]<<"\n";
     }


}



int main(){

  //int z=100;
  srand(time(0));
  int close=100000;
for(int r=10;r<close;r+=10){
    int n=r;

 int *A = new int[n];
for(int i=0;i<n;i++)
     {
         A[i]=rand();
     }
//printList(A,n);

auto start1 = chrono::high_resolution_clock::now();
    ios_base::sync_with_stdio(false);

    /*  ..........Change your algorithm...............*/
    int *m = bubbleSort(A,n);
    //printList(A,n);
    /* .......................................  */


    /*.....................Time taken by 1st Algorithm........................*/
    auto end1 = chrono::high_resolution_clock::now();
    double time_taken1 =chrono::duration_cast<chrono::nanoseconds>(end1 - start1).count();
        time_taken1 *= 1e-9;
    cout << "Time taken by program is : " << fixed
         << time_taken1 << setprecision(9);
    cout << " sec" << endl;


//return 0;
}
}

-------------------------------------------------------------------------------------------
int search(int arr[], int N, int x)
{
    int i;
    for (i = 0; i < N; i++)
        if (arr[i] == x)
            return i;
    return -1;
}

-----------------------------------------------------------
#include<bits/stdc++.h>
#include <iostream>
using namespace std;

int search(int arr[], int N, int x)
{
    int i;
    for (i = 0; i < N; i++)
        if (arr[i] == x)
            return i;
    return -1;
}
void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n - 1; i++)

        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}
int main(void)
{
    srand(time(0));
    int a[10];
    freopen("input.txt", "r", stdin);
     for(int i=0;i<10;i++)
     {
         //a[i]=rand()%10;
         cin>>a[i];
         cout<<a[i]<<"\n";
     }

    int x=32006;

    int N = sizeof(a) / sizeof(a[0]);


    int result = search(a, N, x);
    if(result == -1){cout << "Element is not present in array\n";}
    else{cout << "Element is present at index " << result;}
    return 0;
}
--------------------------------------------------------------------
#include<bits/stdc++.h>
#include <iostream>
 using namespace std;

void func(int **arr,int **arr2, int row, int col)
{
   for (int i=0; i<row; i++)
   {
      for(int j=0 ; j<col; j++)
      {
        cout<<arr[i][j]<<" ";
      }
      printf("\n");
   }
   printf("\n");
   for (int i=0; i<row; i++)
   {
      for(int j=0 ; j<col; j++)
      {
        cout<<arr2[i][j]<<" ";
      }
      printf("\n");
   }
}

void Multiply(int **arr,int **arr2, int row, int col)
{
   int rslt[row][col];
 
    cout << "Multiplication of given two matrices is:\n";
 
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            rslt[i][j] = 0;
 
            for (int k = 0; k < row; k++) {
                rslt[i][j] += arr[i][k] * arr2[k][j];
            }
 
            cout << rslt[i][j] << "\t";
        }
 
        cout << endl;
    }
}
void Addition(int **arr,int **arr2, int row, int col)
{
   int rslt[row][col];
 
    cout << "Addition of given two matrices is:\n";
 
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            rslt[i][j] = arr[i][j] + arr2[i][j];
        }
    }
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            cout << rslt[i][j] << " ";
        }
        cout << "\n";
    }
 
}
void Subtraction(int **arr,int **arr2, int row, int col)
{
   int rslt[row][col];
 
    cout << "Subtraction of given two matrices is:\n";
 
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            rslt[i][j] = arr[i][j] - arr2[i][j];
        }
    }
    for(int i = 0; i < row; i++){
        for(int j = 0; j < col; j++){
            cout << rslt[i][j] << " ";
        }
        cout << "\n";
    }
 
}

int main()
{
    srand(time(0));
  int row, colum;
  cout<<"Enter Row Then Columnn\n";
  cin>>row>>colum;
  int** arr = new int*[row];
  int** arr2 = new int*[row];

  for(int i=0; i<row; i++)
  {
     arr[i] = new int[colum];
     arr2[i] = new int[colum];

  }

  for(int i=0; i<row; i++)
  {
      for(int j=0; j<colum; j++)
      {
         arr[i][j]=rand()%10;
         arr2[i][j]=rand()%10;
      }
  }
  func(arr,arr2, row, colum);
  Addition(arr,arr2, row, colum);
  Subtraction(arr,arr2, row, colum);
  Multiply(arr,arr2, row, colum);

  return 0;
}
----------------------------------------------